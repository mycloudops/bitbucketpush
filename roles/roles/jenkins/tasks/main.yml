---
#Java Installation
- name: Java Installation
  yum:
   name : java-1.8.0-openjdk-devel
   state : latest
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

#Update
- name: update apt-get
  apt:
   update_cache: yes
  when: ansible_os_family == "Debian"

#Java installation when OS is ubuntu
- name: Java Installation
  apt:
   name : default-jre
   state : latest
  when: ansible_os_family == "Debian"  

- name: Java Installation JDK
  apt:
   name : default-jdk
   state : latest
  when: ansible_os_family == "Debian"

#download maven
- name: download maven
  get_url:
    url: https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.5.3/apache-maven-3.5.3-bin.tar.gz
    dest: /opt/

#untar archieve
- name: unarchieve maven
  unarchive:
    src: /opt/apache-maven-3.5.3-bin.tar.gz
    dest: /usr/local/
    copy: no

- name: setting the maven path
  lineinfile:
    dest: /home/ec2-user/.bashrc
    line: export M2_HOME=/usr/local/apache-maven-3.5.3/
    state: present 
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: setting the maven path
  lineinfile:
    dest: /home/ubuntu/.bashrc
    line: export M2_HOME=/usr/local/apache-maven-3.5.3/
    state: present 
  when: ansible_os_family == "Debian" 

- name: setting the maven path
  lineinfile:
    dest: /home/ec2-user/.bashrc
    line: export M2=$M2_HOME/bin
    state: present
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: setting the maven path
  lineinfile:
    dest: /home/ubuntu/.bashrc
    line: export M2=$M2_HOME/bin
    state: present
  when: ansible_os_family == "Debian"

- name: setting the maven path
  lineinfile:
    dest: /home/ec2-user/.bashrc
    line: export PATH=$M2:$PATH
    state: present
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: setting the maven path
  lineinfile:
    dest: /home/ubuntu/.bashrc
    line: export PATH=$M2:$PATH
    state: present
  when: ansible_os_family == "Debian"


- name: running the source command
  shell: source /home/ec2-user/.bashrc
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: running the source command
  shell: source /home/ubuntu/.bashrc
  when: ansible_os_family == "Debian" 

# Variable setup.
- name: Include OS-Specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ __jenkins_pkg_url }}"
  when: jenkins_pkg_url is not defined

# Setup/install tasks.
- include: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include: setup-Debian.yml
  when: ansible_os_family == 'Debian'

# Configure Jenkins init settings.
- include: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  always_run: yes
  

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  always_run: yes

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent

# Update Jenkins and install configured plugins.
- include: plugins.yml

- name: install unzip
  yum: name=unzip state=present
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: install unzip
  apt: name=unzip state=present
  when: ansible_os_family == "Debian"
  
- name: install git
  yum: name=git state=present
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: install git 
  apt: name=git state=present
  when: ansible_os_family == "Debian"
  
- name: plugins scriptfile
  template: src=plugins_script dest=/var/lib/jenkins/ mode=0700
  
- name: name copy userscript
  template: src=createuser.groovy dest=/var/lib/jenkins/init.groovy.d mode=0777
  
- name: install wget 
  yum:
    name: wget
    state: present
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: run script
  shell: sh /var/lib/jenkins/plugins_script {{ plugins }}

- name: copy s3-profile
  template: src=hudson.plugins.s3.S3BucketPublisher.xml dest=/var/lib/jenkins/

- name: copy maven-installation
  template: src=add-maven.groovy dest=/var/lib/jenkins/init.groovy.d/
 
- name: copy jdk-installation
  template: src=jdk-install_rhel.groovy dest=/var/lib/jenkins/init.groovy.d/
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"
  notify: restart jenkins
  
- name: copy jdk-installation
  template: src=jdk-install_ubuntu.groovy dest=/var/lib/jenkins/init.groovy.d/
  when: ansible_os_family == "Debian"
  notify: restart jenkins

- name: copy config_rhel.xml
  template: src=config_rhel.xml dest=/var/lib/jenkins/config.xml mode=0644
  when: ansible_os_family == "RedHat"  or ansible_os_family == "CentOS"

- name: copy config_ubuntu.xml
  template: src=config_ubuntu.xml dest=/var/lib/jenkins/config.xml mode=0644
  when: ansible_os_family == "Debian"

- name: download the swarm-client on slaves
  get_url: 
    url: https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/2.2/swarm-client-2.2-jar-with-dependencies.jar
    dest: /var/lib/jenkins/swarm-client-2.2-jar-with-dependencies.jar
  

- name: copy jenkins-slave.service
  template: src=jenkins-slave.service dest=/etc/systemd/system/jenkins-slave.service
  when: slave
